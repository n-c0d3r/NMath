
#pragma once

/** @file nmath/types/data3.hpp
*
*   Implement data3.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/simd_helper.hpp>
#include <nmath/types/data2.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace nmath {

    NMATH_USING_NLIB_NAMESPACES();



    template<typename F_entry__ = NMATH_DEFAULT_FP_TYPE, typename F_flag__ = void>
    struct TF_data3;

    template<typename F_entry__ = NMATH_DEFAULT_FP_TYPE, typename F_flag__ = void>
    using TPA_data3 = typename TF_data3<F_entry__, F_flag__>::F_passed_argument;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    using F_data3_f32 = TF_data3<f32>;
    using F_data3_i32 = TF_data3<i32>;
    using F_data3_u32 = TF_data3<u32>;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#ifdef NCPP_ENABLE_SSE
#define NMATH_DATA3_SIMD_M128() \
    __m128 xyz_;
#define NMATH_DATA3_SIMD_CONSTRUCTOR_M128()\
    NCPP_FORCE_INLINE TF_data3(__m128 xyz) : \
        xyz_(xyz)\
    {}
#else
#define NMATH_DATA3_SIMD_M128() ;
#define NMATH_DATA3_SIMD_CONSTRUCTOR_M128() ;
#endif

#ifdef NCPP_ENABLE_SSE2
#define NMATH_DATA3_SIMD_M128I() \
    __m128 xyz_;
#define NMATH_DATA3_SIMD_CONSTRUCTOR_M128I()\
    NCPP_FORCE_INLINE TF_data3(__m128i xyz) : \
        xyz_(xyz)\
    {}
#else
#define NMATH_DATA3_SIMD_M128I() ;
#define NMATH_DATA3_SIMD_CONSTRUCTOR_M128I() ;
#endif



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<typename F_flag__>
    struct NCPP_ALIGN(16) TF_data3<f32, F_flag__> {

        ////////////////////////////////////////////////////////////////////////////////////
        //  Typedefs
        ////////////////////////////////////////////////////////////////////////////////////
        using F_entry = f32;
        using F_flag = F_flag__;
        using F_this = TF_data3<F_entry, F_flag__>;

        using F_data2 = TF_data2<F_entry, F_flag__>;
        using PA_data2 = TPA_data2<F_entry, F_flag__>;

        static constexpr u32 entry_count_s = 3;

#ifdef NCPP_ENABLE_SSE
        using F_passed_argument = const F_this;
#else
        using F_passed_argument = const F_this&;
#endif
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Arguments
        ////////////////////////////////////////////////////////////////////////////////////
        union {
            
            struct {
                
                F_entry x;
                F_entry y;
                F_entry z;
                
            };
            
            NMATH_DATA3_SIMD_M128();
            
        };

        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Constructors
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data3() noexcept :
#ifdef NCPP_ENABLE_SSE
            xyz_(simd_f32x4_0000)
#else
            x(0.0f),
            y(0.0f),
            z(0.0f)
#endif
        {
            
            
            
        }
        NCPP_FORCE_INLINE TF_data3(F_entry x, F_entry y, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE
            xyz_(_mm_set_ps(0.0f, z, y, x))
#else
            x(x),
            y(y),
            z(z)
#endif
        {
            
            
            
        }
        NCPP_FORCE_INLINE TF_data3(PA_data2 xy, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE
            xyz_(_mm_set_ps(0.0f, z, xy.y, xy.x))
#else
            x(xy.x),
            y(xy.y),
            z(z)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(F_entry x, PA_data2 yz) noexcept :
#ifdef NCPP_ENABLE_SSE
            xyz_(_mm_set_ps(0.0f, yz.y, yz.x, x))
#else
            x(x),
            y(yz.x),
            z(yz.y)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(const TF_data3& o) noexcept :
#ifdef NCPP_ENABLE_SSE
            xyz_(o.xyz_)
#else
            x(o.x),
            y(o.y),
            z(o.z)
#endif
        {



        }

        NMATH_DATA3_SIMD_CONSTRUCTOR_M128();
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Operators
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data3& NCPP_VECTOR_CALL operator = (F_passed_argument o) noexcept
        {

#ifdef NCPP_ENABLE_SSE
            xyz_ = o.xyz_;
#else
            x = o.x;
            y = o.y;
            z = o.z;
#endif

            return *this;
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator == (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_SSE
            __m128 compare3 = _mm_cmpeq_ps(a.xyz_, b.xyz_);
            int mask = _mm_movemask_ps(compare3);

            return ((mask & 0b0111) == 0b0111);
#else
            return (a.x == b.x) && (a.y == b.y) && (a.z == b.z);
#endif
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator != (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_SSE
            __m128 compare3 = _mm_cmpeq_ps(a.xyz_, b.xyz_);
            int mask = _mm_movemask_ps(compare3);

            return ((mask & 0b0111) != 0b0111);
#else
            return (a.x != b.x) || (a.y != b.y) || (a.z != b.z);
#endif
        }



        ////////////////////////////////////////////////////////////////////////////////////
        //  Functions
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE F_data2 xy() const {

            return {            
                x,
                y
            };
        }
        NCPP_FORCE_INLINE F_data2 yx() const {

            return {
                y,
                x
            };
        }
        NCPP_FORCE_INLINE F_data2 xz() const {

            return {
                x,
                z
            };
        }
        NCPP_FORCE_INLINE F_data2 zx() const {

            return {
                z,
                x
            };
        }
        NCPP_FORCE_INLINE F_data2 yz() const {

            return {
                y,
                z
            };
        }
        NCPP_FORCE_INLINE F_data2 zy() const {

            return {
                z,
                y
            };
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL xzy() const {

#ifdef NCPP_ENABLE_SSE
            return _mm_shuffle_ps(xyz_, xyz_, _MM_SHUFFLE(3, 1, 2, 0));
#else
            return {
                x,
                z,
                y
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL yxz() const {

#ifdef NCPP_ENABLE_SSE
            return _mm_shuffle_ps(xyz_, xyz_, _MM_SHUFFLE(3, 2, 0, 1));
#else
            return {
                y,
                x,
                z
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL yzx() const {

#ifdef NCPP_ENABLE_SSE
            return _mm_shuffle_ps(xyz_, xyz_, _MM_SHUFFLE(3, 0, 2, 1));
#else
            return {
                y,
                z,
                x
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL zxy() const {

#ifdef NCPP_ENABLE_SSE
            return _mm_shuffle_ps(xyz_, xyz_, _MM_SHUFFLE(3, 1, 0, 2));
#else
            return {
                z,
                x,
                y
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL zyx() const {

#ifdef NCPP_ENABLE_SSE
            return _mm_shuffle_ps(xyz_, xyz_, _MM_SHUFFLE(3, 0, 1, 2));
#else
            return {
                z,
                y,
                x
            };
#endif
        }

    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<typename F_flag__>
    struct NCPP_ALIGN(16) TF_data3<i32, F_flag__> {

        ////////////////////////////////////////////////////////////////////////////////////
        //  Typedefs
        ////////////////////////////////////////////////////////////////////////////////////
        using F_entry = i32;
        using F_flag = F_flag__;
        using F_this = TF_data3<F_entry, F_flag__>;

        using F_data2 = TF_data2<F_entry, F_flag__>;
        using PA_data2 = TPA_data2<F_entry, F_flag__>;

        static constexpr u32 entry_count_s = 3;

#ifdef NCPP_ENABLE_SSE2
        using F_passed_argument = const F_this;
#else
        using F_passed_argument = const F_this&;
#endif



        ////////////////////////////////////////////////////////////////////////////////////
        //  Arguments
        ////////////////////////////////////////////////////////////////////////////////////
        union {

            struct {

                F_entry x;
                F_entry y;
                F_entry z;

            };

            NMATH_DATA3_SIMD_M128I();

        };



        ////////////////////////////////////////////////////////////////////////////////////
        //  Constructors
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data3() noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(simd_i32x4_0000)
#else
            x(0),
            y(0),
            z(0)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(F_entry x, F_entry y, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(_mm_set_epi32(0, z, y, x))
#else
            x(x),
            y(y),
            z(z)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(PA_data2 xy, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(_mm_set_epi32(0, z, xy.y, xy.x))
#else
            x(xy.x),
            y(xy.y),
            z(z)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(F_entry x, PA_data2 yz) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(_mm_set_epi32(0, yz.y, yz.x, x))
#else
            x(x),
            y(yz.x),
            z(yz.y)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(const TF_data3& o) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(o.xyz_)
#else
            x(o.x),
            y(o.y),
            z(o.z)
#endif
        {



        }

        NMATH_DATA3_SIMD_CONSTRUCTOR_M128I();



        ////////////////////////////////////////////////////////////////////////////////////
        //  Operators
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data3& NCPP_VECTOR_CALL operator = (F_passed_argument o) noexcept
        {

#ifdef NCPP_ENABLE_SSE2
            xyz_ = o.xyz_;
#else
            x = o.x;
            y = o.y;
            z = o.z;
#endif

            return *this;
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator == (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_SSE2
            __m128i compare3 = _mm_cmpeq_epi32(a.xyz_, b.xyz_);
            int mask = _mm_movemask_epi8(compare3);

            return ((mask & 0x0FFF) == 0x0FFF);
#else
            return (a.x == b.x) && (a.y == b.y) && (a.z == b.z);
#endif
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator != (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_SSE2
            __m128i compare3 = _mm_cmpeq_epi32(a.xyz_, b.xyz_);
            int mask = _mm_movemask_epi8(compare3);

            return ((mask & 0x0FFF) != 0x0FFF);
#else
            return (a.x != b.x) || (a.y != b.y) || (a.z != b.z);
#endif
        }



        ////////////////////////////////////////////////////////////////////////////////////
        //  Functions
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE F_data2 xy() const {

            return {
                x,
                y
            };
        }
        NCPP_FORCE_INLINE F_data2 yx() const {

            return {
                y,
                x
            };
        }
        NCPP_FORCE_INLINE F_data2 xz() const {

            return {
                x,
                z
            };
        }
        NCPP_FORCE_INLINE F_data2 zx() const {

            return {
                z,
                x
            };
        }
        NCPP_FORCE_INLINE F_data2 yz() const {

            return {
                y,
                z
            };
        }
        NCPP_FORCE_INLINE F_data2 zy() const {

            return {
                z,
                y
            };
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL xzy() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 1, 2, 0));
#else
            return {
                x,
                z,
                y
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL yxz() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 2, 0, 1));
#else
            return {
                y,
                x,
                z
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL yzx() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 0, 2, 1));
#else
            return {
                y,
                z,
                x
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL zxy() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 1, 0, 2));
#else
            return {
                z,
                x,
                y
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL zyx() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 0, 1, 2));
#else
            return {
                z,
                y,
                x
            };
#endif
        }

    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<typename F_flag__>
    struct NCPP_ALIGN(16) TF_data3<u32, F_flag__> {
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Typedefs
        ////////////////////////////////////////////////////////////////////////////////////
        using F_entry = u32;
        using F_flag = F_flag__;
        using F_this = TF_data3<F_entry, F_flag__>;

        using F_data2 = TF_data2<F_entry, F_flag__>;
        using PA_data2 = TPA_data2<F_entry, F_flag__>;

        static constexpr u32 entry_count_s = 3;

#ifdef NCPP_ENABLE_SSE2
        using F_passed_argument = const F_this;
#else
        using F_passed_argument = const F_this&;
#endif
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Arguments
        ////////////////////////////////////////////////////////////////////////////////////
        union {
            
            struct {
                
                F_entry x;
                F_entry y;
                F_entry z;
                
            };

            NMATH_DATA3_SIMD_M128I();
            
        };
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Constructors
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data3() noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(simd_i32x4_0000)
#else
            x(0),
            y(0),
            z(0)
#endif
        {
            
            
            
        }
        NCPP_FORCE_INLINE TF_data3(F_entry x, F_entry y, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(_mm_set_epi32(0, z, y, x))
#else
            x(x),
            y(y),
            z(z)
#endif
        {
            
            
            
        }
        NCPP_FORCE_INLINE TF_data3(PA_data2 xy, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(_mm_set_epi32(0, z, xy.y, xy.x))
#else
            x(xy.x),
            y(xy.y),
            z(z)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(F_entry x, PA_data2 yz) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(_mm_set_epi32(0, yz.y, yz.x, x))
#else
            x(x),
            y(yz.x),
            z(yz.y)
#endif
        {



        }
        NCPP_FORCE_INLINE TF_data3(const TF_data3& o) noexcept :
#ifdef NCPP_ENABLE_SSE2
            xyz_(o.xyz_)
#else
            x(o.x),
            y(o.y),
            z(o.z)
#endif
        {



        }

        NMATH_DATA3_SIMD_CONSTRUCTOR_M128I();
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Operators
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data3& NCPP_VECTOR_CALL operator = (F_passed_argument o) noexcept
        {

#ifdef NCPP_ENABLE_SSE2
            xyz_ = o.xyz_;
#else
            x = o.x;
            y = o.y;
            z = o.z;
#endif

            return *this;
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator == (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_SSE2
            __m128i compare3 = _mm_cmpeq_epi32(a.xyz_, b.xyz_);
            int mask = _mm_movemask_epi8(compare3);

            return ((mask & 0x00FFFFFF) == 0x00FFFFFF);
#else
            return (a.x == b.x) && (a.y == b.y) && (a.z == b.z);
#endif
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator != (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_SSE2
            __m128i compare3 = _mm_cmpeq_epi32(a.xyz_, b.xyz_);
            int mask = _mm_movemask_epi8(compare3);

            return ((mask & 0x00FFFFFF) != 0x00FFFFFF);
#else
            return (a.x != b.x) || (a.y != b.y) || (a.z != b.z);
#endif
        }



        ////////////////////////////////////////////////////////////////////////////////////
        //  Functions
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE F_data2 xy() const {

            return {
                x,
                y
            };
        }
        NCPP_FORCE_INLINE F_data2 yx() const {

            return {
                y,
                x
            };
        }
        NCPP_FORCE_INLINE F_data2 xz() const {

            return {
                x,
                z
            };
        }
        NCPP_FORCE_INLINE F_data2 zx() const {

            return {
                z,
                x
            };
        }
        NCPP_FORCE_INLINE F_data2 yz() const {

            return {
                y,
                z
            };
        }
        NCPP_FORCE_INLINE F_data2 zy() const {

            return {
                z,
                y
            };
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL xzy() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 1, 2, 0));
#else
            return {
                x,
                z,
                y
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL yxz() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 2, 0, 1));
#else
            return {
                y,
                x,
                z
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL yzx() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 0, 2, 1));
#else
            return {
                y,
                z,
                x
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL zxy() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 1, 0, 2));
#else
            return {
                z,
                x,
                y
            };
#endif
        }
        NCPP_FORCE_INLINE F_this NCPP_VECTOR_CALL zyx() const {

#ifdef NCPP_ENABLE_SSE2
            return _mm_shuffle_epi32(xyz_, xyz_, _MM_SHUFFLE(3, 0, 1, 2));
#else
            return {
                z,
                y,
                x
            };
#endif
        }

    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    using PA_data3_f32 = TPA_data3<f32>;
    using PA_data3_i32 = TPA_data3<i32>;
    using PA_data3_u32 = TPA_data3<u32>;

}