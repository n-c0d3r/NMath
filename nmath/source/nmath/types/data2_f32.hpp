#pragma once

/** @file nmath/types/data2_f32.hpp
*
*   Implement data2_f32.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/data2_template.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace nmath {

    NMATH_USING_NLIB_NAMESPACES();



    using F_data2_f32 = TF_data2<f32>;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<typename F_flag__>
    struct NCPP_ALIGN(sizeof(f32) * 2) TF_data2<f32, F_flag__> {

        ////////////////////////////////////////////////////////////////////////////////////
        //  Typedefs
        ////////////////////////////////////////////////////////////////////////////////////
        using F_entry = f32;

        using F_flag = F_flag__;

        using F_this = TF_data2<F_entry, F_flag__>;

        static constexpr u32 entry_count_s = 2;

        using F_passed_argument = const F_this&;
        
        NCPP_RTTI_IMPLEMENT_FLAG(nmath::F_data2_f32_flag);
        NCPP_RTTI_IMPLEMENT_FLAG(F_flag__);
        
        

        ////////////////////////////////////////////////////////////////////////////////////
        //  Arguments
        ////////////////////////////////////////////////////////////////////////////////////
        union {

            struct {

                F_entry x;
                F_entry y;

            };
            struct {

                F_entry width;
                F_entry height;

            };

            F_entry m[2];

        };



        ////////////////////////////////////////////////////////////////////////////////////
        //  Constructors
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data2() noexcept = default;
        NCPP_FORCE_INLINE TF_data2(F_entry x, F_entry y) noexcept :
            x(x),
            y(y)
        {
            
            
            
        }
        NCPP_FORCE_INLINE TF_data2(F_entry x) noexcept :
            x(x),
            y(0.0f)
        {



        }
        NCPP_FORCE_INLINE TF_data2(const TF_data2& o) noexcept :
            x(o.x),
            y(o.y)
        {
            
            
            
        }
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Operators
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data2& operator = (F_passed_argument o) noexcept
        {
            
            x = o.x;
            y = o.y;

            return *this;
        }
        NCPP_FORCE_INLINE const F_entry operator [] (i32 index) const noexcept
        {

            return m[index];
        }
        NCPP_FORCE_INLINE F_entry& operator [] (i32 index) noexcept
        {

            return m[index];
        }
        friend NCPP_FORCE_INLINE ncpp::b8 operator == (F_passed_argument a, F_passed_argument b) noexcept
        {

            return a.x == b.x && a.y == b.y;
        }
        friend NCPP_FORCE_INLINE ncpp::b8 operator != (F_passed_argument a, F_passed_argument b) noexcept
        {

            return a.x != b.x || a.y != b.y;
        }



        ////////////////////////////////////////////////////////////////////////////////////
        //  Special values
        ////////////////////////////////////////////////////////////////////////////////////
        static NCPP_FORCE_INLINE F_this zero() noexcept {

            return {
                0.0f,
                0.0f
            };
        }
        static NCPP_FORCE_INLINE F_this one() noexcept {

            return {
                1.0f,
                1.0f
            };
        }
        static NCPP_FORCE_INLINE F_this infinity() noexcept {

            return {
                NMATH_F32_INFINITY,
                NMATH_F32_INFINITY
            };
        }
        static NCPP_FORCE_INLINE F_this negative_infinity() noexcept {

            return {
                NMATH_F32_NEGATIVE_INFINITY,
                NMATH_F32_NEGATIVE_INFINITY
            };
        }
        static NCPP_FORCE_INLINE F_this pi() noexcept {

            return {
                NMATH_F32_PI,
                NMATH_F32_PI
            };
        }
        static NCPP_FORCE_INLINE F_this negative_pi() noexcept {

            return {
                NMATH_F32_NEGATIVE_PI,
                NMATH_F32_NEGATIVE_PI
            };
        }
        static NCPP_FORCE_INLINE F_this half_pi() noexcept {

            return {
                NMATH_F32_PI,
                NMATH_F32_PI
            };
        }
        static NCPP_FORCE_INLINE F_this negative_half_pi() noexcept {

            return {
                NMATH_F32_NEGATIVE_HALF_PI,
                NMATH_F32_NEGATIVE_HALF_PI
            };
        }
        static NCPP_FORCE_INLINE F_this two_pi() noexcept {

            return {
                NMATH_F32_TWO_PI,
                NMATH_F32_TWO_PI
            };
        }
        static NCPP_FORCE_INLINE F_this negative_two_pi() noexcept {

            return {
                NMATH_F32_NEGATIVE_TWO_PI,
                NMATH_F32_NEGATIVE_TWO_PI
            };
        }
        static NCPP_FORCE_INLINE F_this inv_pi() noexcept {

            return {
                NMATH_F32_INV_PI,
                NMATH_F32_INV_PI
            };
        }
        static NCPP_FORCE_INLINE F_this inv_negative_pi() noexcept {

            return {
                NMATH_F32_INV_NEGATIVE_PI,
                NMATH_F32_INV_NEGATIVE_PI
            };
        }
        static NCPP_FORCE_INLINE F_this inv_half_pi() noexcept {

            return {
                NMATH_F32_INV_PI,
                NMATH_F32_INV_PI
            };
        }
        static NCPP_FORCE_INLINE F_this inv_negative_half_pi() noexcept {

            return {
                NMATH_F32_INV_NEGATIVE_HALF_PI,
                NMATH_F32_INV_NEGATIVE_HALF_PI
            };
        }
        static NCPP_FORCE_INLINE F_this inv_two_pi() noexcept {

            return {
                NMATH_F32_TWO_PI,
                NMATH_F32_TWO_PI
            };
        }
        static NCPP_FORCE_INLINE F_this inv_negative_two_pi() noexcept {

            return {
                NMATH_F32_INV_NEGATIVE_TWO_PI,
                NMATH_F32_INV_NEGATIVE_TWO_PI
            };
        }
        static NCPP_FORCE_INLINE F_this right() noexcept {

            return {
                1.0f,
                0.0f
            };
        }
        static NCPP_FORCE_INLINE F_this up() noexcept {

            return {
                0.0f,
                1.0f
            };
        }
        static NCPP_FORCE_INLINE F_this left() noexcept {

            return {
                -1.0f,
                0.0f
            };
        }
        static NCPP_FORCE_INLINE F_this down() noexcept {

            return {
                0.0f,
                -1.0f
            };
        }



        ////////////////////////////////////////////////////////////////////////////////////
        //  Functions
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data2<F_entry> data() const noexcept {

            return {
                x,
                y
            };
        }
        template<typename F_another_data__>
        NCPP_FORCE_INLINE TF_data_cast<F_another_data__> T_data() const noexcept {

            return {
                x,
                y
            };
        }
        NCPP_FORCE_INLINE F_this xy() const noexcept {

            return {
                x,
                y
            };
        }
        NCPP_FORCE_INLINE F_this yx() const noexcept {

            return {
                y,
                x
            };
        }
        
    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    using PA_data2_f32 = TPA_data2<f32>;

    ////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////

    NMATH_DEFINE_DATA2_F32_FORWARD(F_data2_f32);

}
