#pragma once

/** @file nmath/types/range.hpp
*
*   Implement range.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/vector.hpp>
#include <nmath/operators/vector_vector.hpp>
#include <nmath/operators/vector_scalar.hpp>
#include <nmath/functions/element_min_max.hpp>
#include <nmath/functions/element_abs.hpp>
#include <nmath/functions/element_if_equal.hpp>
#include <nmath/functions/element_if_not_equal.hpp>
#include <nmath/utilities/passed_argument_helper.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace nmath {

    template<typename F_value__ = NMATH_DEFAULT_FP_TYPE>
    class TF_range {

    public:
        using F_value = F_value__;
        using PA_value = TPA<F_value>;



    public:
        F_value min;
        F_value max;

    public:
        NCPP_FORCE_INLINE b8 is_valid() const noexcept { return (min <= max); }
        NCPP_FORCE_INLINE F_value center() const noexcept { return (min + max) * 0.5; }
        NCPP_FORCE_INLINE F_value half_size() const noexcept { return (max - min) * 0.5; }



    public:
        NCPP_FORCE_INLINE TF_range() noexcept = default;
        NCPP_FORCE_INLINE TF_range(PA_value min, PA_value max) noexcept :
            min(min),
            max(max)
        {}
        NCPP_FORCE_INLINE TF_range(const TF_range& x) noexcept :
            min(x.min),
            max(x.max)
        {}
        NCPP_FORCE_INLINE TF_range& operator = (const TF_range& x) noexcept {

            this->min = x.min;
            this->max = x.max;

            return *this;
        }



    public:
        NCPP_FORCE_INLINE operator b8 () const noexcept {

            return is_valid();
        }
        auto NMATH_CALL_CNV signed_distance(PA_value v) const noexcept {

            F_value min_delta = min - v;
            F_value max_delta = v - max;

            F_value min_delta_abs = element_abs(min_delta);
            F_value max_delta_abs = element_abs(max_delta);

            F_value choosed_delta_abs = element_min(min_delta_abs, max_delta_abs);

            F_value result = element_if_equal(choosed_delta_abs, min_delta_abs, min_delta);

            return element_if_equal(result, max_delta_abs, max_delta);
        }
        b8 NMATH_CALL_CNV is_contains(PA_value v) const noexcept {

            return (
                (v >= min)
                && (v <= max)
            );
        }
        TF_range NMATH_CALL_CNV expand(PA_value v) noexcept {

            return {
                element_min(v, min),
                element_max(v, max)
            };
        }
        b8 NMATH_CALL_CNV is_contains(const TF_range& v) const noexcept {

            return (
                (v.min >= min)
                && (v.max <= max)
            );
        }
        TF_range NMATH_CALL_CNV expand(const TF_range& v) noexcept {

            return {
                element_min(v.min, min),
                element_max(v.max, max)
            };
        }
    };



    using F_range = TF_range<>;

    using F_vector2_range = TF_range<F_vector2>;
    using F_vector3_range = TF_range<F_vector3>;
    using F_vector4_range = TF_range<F_vector4>;

    using F_vector2_range_f32 = TF_range<F_vector2_f32>;
    using F_vector3_range_f32 = TF_range<F_vector3_f32>;
    using F_vector4_range_f32 = TF_range<F_vector4_f32>;

}
