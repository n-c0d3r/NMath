

#pragma once

/** @file nmath/types/data4x4.hpp
*
*   Implement data4x4.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/data4.hpp>
#include <nmath/types/data_helper.hpp>
#include <nmath/types/data_forward.hpp>
#include <nmath/types/data_default_flag.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace nmath {

    NMATH_USING_NLIB_NAMESPACES();



    template<typename F_entry__ = NMATH_DEFAULT_FP_TYPE, typename F_flag__ = F_data_default_flag>
    struct TF_data4x4;

    template<typename F_entry__ = NMATH_DEFAULT_FP_TYPE, typename F_flag__ = F_data_default_flag>
    using TPA_data4x4 = typename TF_data4x4<F_entry__, F_flag__>::F_passed_argument;

    NCPP_RTTI_CREATE_FLAG(F_data4x4_f32_flag);
    NCPP_RTTI_CREATE_FLAG(F_data4x4_i32_flag);
    NCPP_RTTI_CREATE_FLAG(F_data4x4_u32_flag);

    NCPP_RTTI_CREATE_FLAG(F_data4x4_f64_flag);
    NCPP_RTTI_CREATE_FLAG(F_data4x4_i64_flag);
    NCPP_RTTI_CREATE_FLAG(F_data4x4_u64_flag);



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    using F_data4x4_f32 = TF_data4x4<f32>;



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#ifdef NCPP_ENABLE_AVX
#define NMATH_DATA4X4_SIMD_M256() \
    struct {\
        __m256 xy_;\
        __m256 zw_;\
    };
#define NMATH_DATA4X4_SIMD_CONSTRUCTOR_M256() \
    NCPP_FORCE_INLINE TF_data4x4(__m256 xy, __m256 zw) : \
        xy_(xy),\
        zw_(zw)\
    {}
#else
#define NMATH_DATA4X4_SIMD_M256() ;
#define NMATH_DATA4X4_SIMD_CONSTRUCTOR_M256() ;
#endif



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    template<typename F_flag__>
    struct NCPP_ALIGN(64) TF_data4x4<f32, F_flag__> {
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Typedefs
        ////////////////////////////////////////////////////////////////////////////////////
        using F_entry = f32;

        using F_pack = TF_data4<F_entry, F_flag__>;
        using PA_pack = TPA_data4<F_entry, F_flag__>;

        using F_flag = F_flag__;

        using F_this = TF_data4x4<F_entry, F_flag__>;

        static constexpr u32 entry_count_s = 16;
        static constexpr u32 pack_count_s = 4;

        using F_passed_argument = const F_this&;
        
        NCPP_RTTI_IMPLEMENT_FLAG(TF_data4x4, nmath::F_data4x4_f32_flag);
        NCPP_RTTI_IMPLEMENT_FLAG(TF_data4x4, F_flag__);
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Arguments
        ////////////////////////////////////////////////////////////////////////////////////
        union {
            
            struct {
                
                F_pack x;
                F_pack y;
                F_pack z;
                F_pack w;
                
            };

            F_pack m[4];
            
            NMATH_DATA4X4_SIMD_M256();
            
        };
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Basic constructors
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data4x4() noexcept :
#ifdef NCPP_ENABLE_AVX
            xy_(simd_f32x8_00000000),
            zw_(simd_f32x8_00000000)
#else
            x(),
            y(),
            z(),
            w()
#endif
        {
            
            
            
        }
        NCPP_FORCE_INLINE TF_data4x4(F_pack x, F_pack y, F_pack z, F_pack w) noexcept :
#ifdef NCPP_ENABLE_AVX
            xy_(_mm256_set_m128(y.xyzw_, x.xyzw_)),
            zw_(_mm256_set_m128(w.xyzw_, z.xyzw_))
#else
            x(x),
            y(y),
            z(z),
            w(w)
#endif
        {
            
            
            
        }
        NCPP_FORCE_INLINE TF_data4x4(const TF_data4x4& o) noexcept :
#ifdef NCPP_ENABLE_AVX
            xy_(o.xy_),
            zw_(o.zw_)
#else
            x(o.x),
            y(o.y),
            z(o.z),
            w(o.w)
#endif
        {
            
            
            
        }

        NMATH_DATA4X4_SIMD_CONSTRUCTOR_M256();
        
        
        
        ////////////////////////////////////////////////////////////////////////////////////
        //  Operators
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data4x4& NCPP_VECTOR_CALL operator = (F_passed_argument o) noexcept
        {

#ifdef NCPP_ENABLE_AVX
            xy_ = o.xy_;
            zw_ = o.zw_;
#else
            x = o.x;
            y = o.y;
            z = o.z;
            w = o.w;
#endif

            return *this;
        }
        NCPP_FORCE_INLINE PA_pack operator [] (i32 index) const noexcept
        {

            return m[index];
        }
        NCPP_FORCE_INLINE F_pack& operator [] (i32 index) noexcept
        {

            return m[index];
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator == (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_AVX
            __m256 xy_compare8 = _mm256_cmp_ps(a.xy_, b.xy_, _CMP_EQ_OQ);
            int xy_mask = _mm256_movemask_ps(xy_compare8);

            __m256 zw_compare8 = _mm256_cmp_ps(a.zw_, b.zw_, _CMP_EQ_OQ);
            int zw_mask = _mm256_movemask_ps(zw_compare8);

            return (xy_mask == 0b11111111) && (zw_mask == 0b11111111);
#else
            return (a.x == b.x) && (a.y == b.y) && (a.z == b.z) && (a.w == b.w);
#endif
        }
        friend NCPP_FORCE_INLINE ncpp::b8 NCPP_VECTOR_CALL operator != (F_passed_argument a, F_passed_argument b) noexcept
        {

#ifdef NCPP_ENABLE_AVX
            __m256 xy_compare8 = _mm256_cmp_ps(a.xy_, b.xy_, _CMP_EQ_OQ);
            int xy_mask = _mm256_movemask_ps(xy_compare8);

            __m256 zw_compare8 = _mm256_cmp_ps(a.zw_, b.zw_, _CMP_EQ_OQ);
            int zw_mask = _mm256_movemask_ps(zw_compare8);

            return (xy_mask != 0b11111111) || (zw_mask != 0b11111111);
#else
            return (a.x != b.x) || (a.y != b.y) || (a.z != b.z) || (a.w != b.w);
#endif
        }



        ////////////////////////////////////////////////////////////////////////////////////
        //  Functions
        ////////////////////////////////////////////////////////////////////////////////////
        NCPP_FORCE_INLINE TF_data4x4<F_entry> NCPP_VECTOR_CALL data4x4() const {

#ifdef NCPP_ENABLE_AVX
            return {
                xy_,
                zw_
            };
#else
            return {
                x,
                y,
                z,
                w
            };
#endif
        }
        template<typename F_another_data4x4__>
        NCPP_FORCE_INLINE TF_data_cast<F_another_data4x4__> T_data4x4() const {

#ifdef NCPP_ENABLE_AVX
            return {
                xy_,
                zw_
            };
#else
            return {
                x,
                y,
                z,
                w
            };
#endif
        }
                
    };



    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    using PA_data4x4_f32 = TPA_data4x4<f32>;

}
