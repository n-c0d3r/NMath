
#pragma once

/** @file nmath/types/data3_u32.hpp
*
*   Implement data3_u32.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/data3_template.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace nmath {

	NMATH_USING_NLIB_NAMESPACES();



	using F_data3_u32 = TF_data3<u32>;



	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#ifdef NCPP_ENABLE_SSE2
#define NMATH_DATA3_SIMD_M128U() \
    __m128i xyz_;
#define NMATH_DATA3_SIMD_CONSTRUCTOR_M128U()\
    NCPP_FORCE_INLINE TF_data3(__m128i xyz) : \
        xyz_(xyz)\
    {}
#else
	#define NMATH_DATA3_SIMD_M128U() ;
#define NMATH_DATA3_SIMD_CONSTRUCTOR_M128U() ;
#endif



	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



	template<typename F_flag__>
	struct NCPP_ALIGN(sizeof(u32) * 4) TF_data3<u32, F_flag__> {

		////////////////////////////////////////////////////////////////////////////////////
		//  Typedefs
		////////////////////////////////////////////////////////////////////////////////////
		using F_entry = u32;

		using F_flag = F_flag__;

		using F_this = TF_data3<F_entry, F_flag__>;

		using F_data2 = TF_data2<F_entry, F_flag__>;
		using PA_data2 = TPA_data2<F_entry, F_flag__>;

		static constexpr u32 entry_count_s = 3;

#ifdef NCPP_ENABLE_SSE2
		using F_passed_argument = const F_this;
#else
		using F_passed_argument = const F_this&;
#endif

		template<typename F_entry__>
		using TF_bind_entry = TF_data3<F_entry__, F_flag__>;

		NCPP_RTTI_IMPLEMENT_FLAG(nmath::F_data3_u32_flag);
		NCPP_RTTI_IMPLEMENT_FLAG(F_flag__);



		////////////////////////////////////////////////////////////////////////////////////
		//  Arguments
		////////////////////////////////////////////////////////////////////////////////////
		union {

			struct {

				F_entry x;
				F_entry y;
				F_entry z;

			};
			struct {

				F_entry width;
				F_entry height;
				F_entry depth;

			};

			F_entry m[4];

			NMATH_DATA3_SIMD_M128U();

		};



		////////////////////////////////////////////////////////////////////////////////////
		//  Constructors
		////////////////////////////////////////////////////////////////////////////////////
		NCPP_FORCE_INLINE TF_data3() noexcept = default;
		NCPP_FORCE_INLINE TF_data3(F_entry x, F_entry y, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE2
			xyz_(_mm_set_epi32(0, z, y, x))
#else
		x(x),
            y(y),
            z(z)
#endif
		{}
		NCPP_FORCE_INLINE TF_data3(PA_data2 xy, F_entry z) noexcept :
#ifdef NCPP_ENABLE_SSE2
			xyz_(_mm_set_epi32(0, z, xy.y, xy.x))
#else
		x(xy.x),
            y(xy.y),
            z(z)
#endif
		{}
		NCPP_FORCE_INLINE TF_data3(F_entry x, PA_data2 yz) noexcept :
#ifdef NCPP_ENABLE_SSE2
			xyz_(_mm_set_epi32(0, yz.y, yz.x, x))
#else
		x(x),
            y(yz.x),
            z(yz.y)
#endif
		{}
		NCPP_FORCE_INLINE TF_data3(PA_data2 xy) noexcept :
#ifdef NCPP_ENABLE_SSE2
			xyz_(_mm_set_epi32(0, 0, xy.y, xy.x))
#else
		x(xy.x),
            y(xy.y),
            z(0)
#endif
		{}
		NCPP_FORCE_INLINE TF_data3(const TF_data3& o) noexcept :
#ifdef NCPP_ENABLE_SSE2
			xyz_(o.xyz_)
#else
		x(o.x),
            y(o.y),
            z(o.z)
#endif
		{}
#ifdef NCPP_ENABLE_SSE4
		TF_data3(TF_data3<i32, F_flag> o) noexcept;
#else
		TF_data3(const TF_data3<i32, F_flag>& o) noexcept;
#endif
#ifdef NCPP_ENABLE_SSE
		TF_data3(TF_data3<f32, F_flag> o) noexcept;
#else
		TF_data3(const TF_data3<f32, F_flag>& o) noexcept;
#endif

		NMATH_DATA3_SIMD_CONSTRUCTOR_M128U();



		////////////////////////////////////////////////////////////////////////////////////
		//  Operators
		////////////////////////////////////////////////////////////////////////////////////
		NCPP_FORCE_INLINE TF_data3& NMATH_CALL_CNV operator = (F_passed_argument o) noexcept
		{

#ifdef NCPP_ENABLE_SSE2
			xyz_ = o.xyz_;
#else
			x = o.x;
            y = o.y;
            z = o.z;
#endif

			return *this;
		}
#ifdef NCPP_ENABLE_SSE4
		TF_data3& NMATH_CALL_CNV operator = (TF_data3<i32, F_flag> o) noexcept;
#else
		TF_data3& NMATH_CALL_CNV operator = (const TF_data3<i32, F_flag>& o) noexcept;
#endif
#ifdef NCPP_ENABLE_SSE
		TF_data3& NMATH_CALL_CNV operator = (TF_data3<f32, F_flag> o) noexcept;
#else
		TF_data3& NMATH_CALL_CNV operator = (const TF_data3<f32, F_flag>& o) noexcept;
#endif
		NCPP_FORCE_INLINE const F_entry operator [] (i32 index) const noexcept
		{

			return m[index];
		}
		NCPP_FORCE_INLINE F_entry& operator [] (i32 index) noexcept
		{

			return m[index];
		}
		friend NCPP_FORCE_INLINE ncpp::b8 NMATH_CALL_CNV operator == (F_passed_argument a, F_passed_argument b) noexcept
		{

#ifdef NCPP_ENABLE_SSE2
			__m128i compare3 = _mm_cmpeq_epi32(a.xyz_, b.xyz_);
			int mask = _mm_movemask_epi8(compare3);

			return ((mask & 0b0000111111111111) == 0b0000111111111111);
#else
			return (a.x == b.x) && (a.y == b.y) && (a.z == b.z);
#endif
		}
		friend NCPP_FORCE_INLINE ncpp::b8 NMATH_CALL_CNV operator != (F_passed_argument a, F_passed_argument b) noexcept
		{

#ifdef NCPP_ENABLE_SSE2
			__m128i compare3 = _mm_cmpeq_epi32(a.xyz_, b.xyz_);
			int mask = _mm_movemask_epi8(compare3);

			return ((mask & 0b0000111111111111) != 0b0000111111111111);
#else
			return (a.x != b.x) || (a.y != b.y) || (a.z != b.z);
#endif
		}



		////////////////////////////////////////////////////////////////////////////////////
		//  Special values
		////////////////////////////////////////////////////////////////////////////////////
		static NCPP_FORCE_INLINE F_this zero() noexcept {

#ifdef NCPP_ENABLE_SSE2
			return {
				simd_i32x4_0000
			};
#else
			return {
                0,
                0,
                0
            };
#endif
		}
		static NCPP_FORCE_INLINE F_this one() noexcept {

#ifdef NCPP_ENABLE_SSE2
			return {
				simd_i32x4_1111
			};
#else
			return {
                1,
                1,
                1
            };
#endif
		}
		static NCPP_FORCE_INLINE F_this full() noexcept {

#ifdef NCPP_ENABLE_SSE2
			return {
				simd_i32x4_FFFF
			};
#else
			return {
                NMATH_U32_FULL,
                NMATH_U32_FULL,
                NMATH_U32_FULL
            };
#endif
		}



		////////////////////////////////////////////////////////////////////////////////////
		//  Functions
		////////////////////////////////////////////////////////////////////////////////////
		NCPP_FORCE_INLINE F_data2 xy() const noexcept {

			return {
				x,
				y
			};
		}
		NCPP_FORCE_INLINE F_data2 yx() const noexcept {

			return {
				y,
				x
			};
		}
		NCPP_FORCE_INLINE F_data2 xz() const noexcept {

			return {
				x,
				z
			};
		}
		NCPP_FORCE_INLINE F_data2 zx() const noexcept {

			return {
				z,
				x
			};
		}
		NCPP_FORCE_INLINE F_data2 yz() const noexcept {

			return {
				y,
				z
			};
		}
		NCPP_FORCE_INLINE F_data2 zy() const noexcept {

			return {
				z,
				y
			};
		}

		NCPP_FORCE_INLINE TF_data3<F_entry> data() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return xyz_;
#else
			return {
                x,
                y,
                z
            };
#endif
		}
		template<typename F_another_data__>
		NCPP_FORCE_INLINE TF_data_cast<F_another_data__> T_data() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return xyz_;
#else
			return {
                x,
                y,
                z
            };
#endif
		}
		NCPP_FORCE_INLINE F_this xyz() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return xyz_;
#else
			return {
                x,
                y,
                z
            };
#endif
		}
		NCPP_FORCE_INLINE F_this xzy() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return _mm_shuffle_epi32(xyz_, _MM_SHUFFLE(3, 1, 2, 0));
#else
			return {
                x,
                z,
                y
            };
#endif
		}
		NCPP_FORCE_INLINE F_this yxz() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return _mm_shuffle_epi32(xyz_, _MM_SHUFFLE(3, 2, 0, 1));
#else
			return {
                y,
                x,
                z
            };
#endif
		}
		NCPP_FORCE_INLINE F_this yzx() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return _mm_shuffle_epi32(xyz_, _MM_SHUFFLE(3, 0, 2, 1));
#else
			return {
                y,
                z,
                x
            };
#endif
		}
		NCPP_FORCE_INLINE F_this zxy() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return _mm_shuffle_epi32(xyz_, _MM_SHUFFLE(3, 1, 0, 2));
#else
			return {
                z,
                x,
                y
            };
#endif
		}
		NCPP_FORCE_INLINE F_this zyx() const noexcept {

#ifdef NCPP_ENABLE_SSE2
			return _mm_shuffle_epi32(xyz_, _MM_SHUFFLE(3, 0, 1, 2));
#else
			return {
                z,
                y,
                x
            };
#endif
		}

	};



	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



	using PA_data3_u32 = TPA_data3<u32>;

	////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////

	NMATH_DEFINE_DATA3_U32_FORWARD(F_data3_u32)

}
