#pragma once

/** @file nmath/functions/rotation_look_at.hpp
*
*   Implement rotation_look_at.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/vector.hpp>
#include <nmath/types/quaternion.hpp>
#include <nmath/functions/length.hpp>
#include <nmath/functions/cross.hpp>
#include <nmath/functions/dot.hpp>
#include <nmath/functions/normalize.hpp>
#include <nmath/functions/quaternion_identity.hpp>
#include <nmath/operators/vector_scalar.hpp>

#pragma endregion



namespace nmath {

    template<typename F__ = F_quaternion_f32>
    F__ NMATH_CALL_CNV T_rotation_look_at(auto from_direction, auto to_direction) noexcept;

    template<>
    inline F_quaternion_f32 NMATH_CALL_CNV T_rotation_look_at<F_quaternion_f32>(PA_vector3_f32 from_direction, PA_vector3_f32 to_direction) noexcept {

        NCPP_WARNING(
            abs(1.0f - length(from_direction))
            <= 0.01f
        ) << "invalid from_direction, it have to be normalized";
        NCPP_WARNING(
            abs(1.0f - length(to_direction))
            <= 0.01f
        ) << "invalid to_direction, it have to be normalized";

        F_vector3_f32 axis = (
            cross(from_direction, to_direction)
        );

        if(length_sq(axis) <= 0.00001f)
            return T_identity<F_quaternion_f32>();

        f32 dot_half = dot(from_direction, to_direction);
        f32 sin_half_angle = sqrt(0.5f - dot_half);
        f32 cos_half_angle = sqrt(0.5f + dot_half);

        return quaternion_forward(
            F_data4_f32 {
                data_forward(axis * sin_half_angle),
                cos_half_angle
            }
        );
    }

}
