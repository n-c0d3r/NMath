#pragma once

/** @file nmath/functions/dot.hpp
*
*   Implement dot.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/vector.hpp>
#include <nmath/types/quaternion.hpp>
#include <nmath/functions/data_functions.hpp>

#pragma endregion



namespace nmath {

	////////////////////////////////////////////////////////////////////////////////////
	//  f32
	////////////////////////////////////////////////////////////////////////////////////
	NCPP_FORCE_INLINE f32 dot(PA_vector2_f32 a, PA_vector2_f32 b) noexcept {

		return a.x * a.x + a.y * a.y;
	}
	NCPP_FORCE_INLINE f32 NCPP_VECTOR_CALL dot(PA_vector3_f32 a, PA_vector3_f32 b) noexcept {

#ifdef NCPP_ENABLE_SSE4
		return _mm_cvtss_f32(_mm_dp_ps(a.xyz_, b.xyz_, 0x71));
#elif defined(NCPP_ENABLE_SSE3)
		__m128 mul_res, shuf_reg, sums_reg;
		mul_res = _mm_mul_ps(a.xyz_, b.xyz_);
		mul_res = _mm_mul_ps(mul_res, m128_f32x4_1110);

		shuf_reg = _mm_movehdup_ps(mul_res);
		sums_reg = _mm_add_ps(mul_res, shuf_reg);
		shuf_reg = _mm_movehl_ps(shuf_reg, sums_reg);
		sums_reg = _mm_add_ss(sums_reg, shuf_reg);

		return  _mm_cvtss_f32(sums_reg);
#elif defined(NCPP_ENABLE_SSE)
		__m128 mul_res, shuf_reg, sums_reg;
		mul_res = _mm_mul_ps(a.xyz_, b.xyz_);
		mul_res = _mm_mul_ps(mul_res, m128_f32x4_1110);

		// Replacing _mm_movehdup_ps(mul_res)
		shuf_reg = _mm_permute_ps(mul_res, _MM_SHUFFLE(3, 3, 1, 1));
		sums_reg = _mm_add_ps(mul_res, shuf_reg);

		// Replacing _mm_movehl_ps(shuf_reg, sums_reg)
		shuf_reg = _mm_shuffle_ps(shuf_reg, sums_reg, _MM_SHUFFLE(3, 1, 2, 0));
		sums_reg = _mm_add_ss(sums_reg, shuf_reg);

		return  _mm_cvtss_f32(sums_reg);
#else
		return a.x * a.x + a.y * a.y + a.z * a.z;
#endif
	}
	NCPP_FORCE_INLINE f32 NCPP_VECTOR_CALL dot(PA_vector4_f32 a, PA_vector4_f32 b) noexcept {

		return data4_dot(a, b);
	}
	NCPP_FORCE_INLINE f32 NCPP_VECTOR_CALL dot(PA_quaternion_f32 a, PA_quaternion_f32 b) noexcept {

		return data4_dot(a, b);
	}

}
