#pragma once

/** @file nmath/functions/intersect.hpp
*
*   Implement intersect functions.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/plane.hpp>
#include <nmath/types/ray.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace nmath
{
    enum class E_intersect_face
    {
        FRONT = 0x1,
        BACK = 0x2,
        ALL = FRONT | BACK
    };



    template<typename F_element__ = NMATH_DEFAULT_FP_TYPE, E_intersect_face intersect_face__ = E_intersect_face::ALL>
    inline b8 T_intersect(const TF_ray<F_element__>& ray, const TF_plane<F_element__>& plane, TF_vector3<F_element__>& out_point, F_element__& out_t)
    {
        NCPP_ASSERT(ray);
        NCPP_ASSERT(plane);

        F_element__ numerator = (
            dot(plane.center, plane.direction)
            - dot(ray.origin, plane.direction)
        );
        F_element__ denominator = dot(ray.direction, plane.direction);

        if constexpr (intersect_face__ == E_intersect_face::ALL)
        {
            if(abs(denominator) <= T_default_tolerance<F_element__>)
            {
                out_t = 0.0;
                return false;
            }
        }

        if constexpr (intersect_face__ == E_intersect_face::FRONT)
        {
            if(denominator >= 0.0)
            {
                out_t = 0.0;
                return false;
            }
        }
        if constexpr (intersect_face__ == E_intersect_face::BACK)
        {
            if(denominator <= 0.0)
            {
                out_t = 0.0;
                return false;
            }
        }

        F_element__ t = numerator / denominator;

        if(t < F_element__(0.0))
        {
            out_t = t;
            return false;
        }

        out_point = ray.origin + ray.direction * t;

        return true;
    }
}
