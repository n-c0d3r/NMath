#pragma once

/** @file nmath/functions/data_functions.hpp
*
*   Implement data functions.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/data2.hpp>
#include <nmath/types/data_helper.hpp>

#pragma endregion



////////////////////////////////////////////////////////////////////////////////////
//  F32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {

    NMATH_USING_NLIB_NAMESPACES();



    static constexpr u32 D2_SELECT_X0 = 0;
    static constexpr u32 D2_SELECT_Y0 = 1;

    static constexpr u32 D2_SELECT_X1 = 3;
    static constexpr u32 D2_SELECT_Y1 = 4;



    ////////////////////////////////////////////////////////////////////////////////////
    //  Basic algorithmic functions
    ////////////////////////////////////////////////////////////////////////////////////
    NCPP_FORCE_INLINE F_data2_f32 data2_round(PA_data2_f32 a) noexcept {

        return {};
    }



    ////////////////////////////////////////////////////////////////////////////////////
    //  Entry manipulate functions
    ////////////////////////////////////////////////////////////////////////////////////
    template<
        u32 x_selector__,
        u32 y_selector__
    >
    NCPP_FORCE_INLINE F_data2_f32 T_data2_static_permute(
        PA_data2_f32 a,
        PA_data2_f32 b
    ) noexcept {
        
        return {
          
            a[(u32)x_selector__ & 2],
            a[(u32)y_selector__ & 2]
            
        };
        
    }



    ////////////////////////////////////////////////////////////////////////////////////
    //  FMA functions
    ////////////////////////////////////////////////////////////////////////////////////
    NCPP_FORCE_INLINE F_data2_f32 data2_multiply_add(
        PA_data2_f32 a,
        PA_data2_f32 b,
        PA_data2_f32 c
    ) noexcept {
                
        return {
          
            a.x * b.x + c.x,
            a.y * b.y + c.y
            
        };
        
    }
    NCPP_FORCE_INLINE F_data2_f32 data2_multiply_addsub(
        PA_data2_f32 a,
        PA_data2_f32 b,
        PA_data2_f32 c
   ) noexcept {
        
        return {
          
            a.x * b.x + c.x,
            a.y * b.y - c.y
            
        };
        
    }
    NCPP_FORCE_INLINE F_data2_f32 data2_multiply_sub(
        PA_data2_f32 a,
        PA_data2_f32 b,
        PA_data2_f32 c
    ) noexcept {
    
        return {
          
            a.x * b.x - c.x,
            a.y * b.y - c.y
            
        };
        
    }
    NCPP_FORCE_INLINE F_data2_f32 data2_multiply_subadd(
        PA_data2_f32 a,
        PA_data2_f32 b,
        PA_data2_f32 c
   ) noexcept {
    
        return {
          
            a.x * b.x - c.x,
            a.y * b.y + c.y
            
        };
        
    }



    ////////////////////////////////////////////////////////////////////////////////////
    //  Dot, cross product, length, etc.
    ////////////////////////////////////////////////////////////////////////////////////
    NCPP_FORCE_INLINE f32 data2_dot(PA_data2_f32 a, PA_data2_f32 b) noexcept {

        return a.x * a.x + a.y * a.y;
    }
    NCPP_FORCE_INLINE f32 data2_cross(PA_data2_f32 a, PA_data2_f32 b) noexcept {

        return a.x * b.y - a.y * b.x;
    }



    ////////////////////////////////////////////////////////////////////////////////////
    //  Trigonometry functions
    ////////////////////////////////////////////////////////////////////////////////////
    NCPP_FORCE_INLINE F_data2_f32 NCPP_VECTOR_CALL data2_mod_angles(PA_data2_f32 a) noexcept {

        return {};
    }

    NCPP_FORCE_INLINE F_data2_f32 NCPP_VECTOR_CALL data2_sin_angles(PA_data2_f32 a) noexcept {

        return {};
    }

    NCPP_FORCE_INLINE F_data2_f32 NCPP_VECTOR_CALL data2_cos_angles(PA_data2_f32 a) noexcept {

        return {};
    }

    NCPP_FORCE_INLINE F_data2_f32 NCPP_VECTOR_CALL data2_sin_cos_angles(PA_data2_f32 a) noexcept {

        return {};
    }

}
