#pragma once

/** @file nmath/utilities/format_encode.hpp
*
*   Implement format encode.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

#pragma endregion



namespace nmath
{
	struct F_f16_data
	{
		u16 data;
	};



	inline u32 as_u32(const float x) {
		return *(u32*)&x;
	}
	inline float as_f32(const u32 x) {
		return *(float*)&x;
	}

	inline F_f16_data format_encode_f32_to_f16_data(f32 x) noexcept
	{
		const u32 b = as_u32(x)+0x00001000; // round-to-nearest-even: add last bit after truncated mantissa
		const u32 e = (b&0x7F800000)>>23; // exponent
		const u32 m = b&0x007FFFFF; // mantissa; in line below: 0x007FF000 = 0x00800000-0x00001000 = decimal indicator flag - initial rounding
		return {
			u16(
				u32(
					(b&0x80000000)>>16 | (e>112)*((((e-112)<<10)&0x7C00)|m>>13) | ((e<113)&(e>101))*((((0x007FF000+m)>>(125-e))+1)>>1) | (e>143)*0x7FFF // sign : normalized : denormalized : saturate
				)
			)
		};
	}
	inline f32 format_encode_f16_data_to_f32(F_f16_data x) noexcept
	{
		const u32 e = (x.data&0x7C00)>>10; // exponent
		const u32 m = (x.data&0x03FF)<<13; // mantissa
		const u32 v = as_u32((float)m)>>23; // evil log2 bit hack to count leading zeros in denormalized format
		return as_f32((x.data&0x8000)<<16 | (e!=0)*((e+112)<<23|m) | ((e==0)&(m!=0))*((v-37)<<23|((m<<(150-v))&0x007FE000))); // sign : normalized : denormalized
	}
}