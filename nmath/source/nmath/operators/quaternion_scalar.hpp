#pragma once

/** @file nmath/operators/quaternion_scalar.hpp
*
*   Implement operators between quaternion and scalar.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/quaternion.hpp>
#include <nmath/operators/helper.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_quaternion_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {

    NCPP_FORCE_INLINE F_quaternion_f32 NCPP_VECTOR_CALL multiply(nmath::F_quaternion_f32 a, float b) noexcept
    {

        return quaternion_forward(
            data4_multiply(data_forward(a), b)
        );
    }
    NCPP_FORCE_INLINE F_quaternion_f32 NCPP_VECTOR_CALL multiply(float b, nmath::F_quaternion_f32 a) noexcept
    {

        return quaternion_forward(
            data4_multiply(data_forward(a), b)
        );
    }

    NCPP_FORCE_INLINE F_quaternion_f32 NCPP_VECTOR_CALL divide(nmath::F_quaternion_f32 a, float b) noexcept
    {

        return quaternion_forward(
            data4_divide(data_forward(a), b)
        );
    }

}

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_quaternion_f32, float, nmath::F_quaternion_f32);
NMATH_DEFINE_MULTIPLY_OPERATOR(float, nmath::PA_quaternion_f32, nmath::F_quaternion_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_quaternion_f32, float);

NMATH_DEFINE_DIVIDE_OPERATOR(nmath::PA_quaternion_f32, float, nmath::F_quaternion_f32);
NMATH_DEFINE_SELF_DIVIDE_OPERATOR(nmath::F_quaternion_f32, float);