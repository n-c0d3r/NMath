#pragma once

/** @file nmath/operators/quaternion_quaternion.hpp
*
*   Implement operators between quaternion and quaternion.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/quaternion.hpp>
#include <nmath/functions/complex_multiply.hpp>
#include <nmath/operators/helper.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_quaternion_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {

    NCPP_FORCE_INLINE F_quaternion_f32 NCPP_VECTOR_CALL minus(nmath::PA_quaternion_f32 a) noexcept
    {

#ifdef NCPP_ENABLE_SSE
        return _mm_mul_ps(a.xyzw_, simd_f32x4_1111_negative);
#else
        return {

            -a.x,
            -a.y,
            -a.z,
            -a.w

        };
#endif
    }
    NCPP_FORCE_INLINE F_quaternion_f32 NCPP_VECTOR_CALL add(nmath::PA_quaternion_f32 a, nmath::PA_quaternion_f32 b) noexcept
    {

#ifdef NCPP_ENABLE_SSE
        return _mm_add_ps(a.xyzw_, b.xyzw_);
#else
        return {

            a.x + b.x,
            a.y + b.y,
            a.z + b.z,
            a.w + b.w

        };
#endif
    }
    NCPP_FORCE_INLINE F_quaternion_f32 NCPP_VECTOR_CALL subtract(nmath::PA_quaternion_f32 a, nmath::PA_quaternion_f32 b) noexcept
    {

#ifdef NCPP_ENABLE_SSE
        return _mm_sub_ps(a.xyzw_, b.xyzw_);
#else
        return {

            a.x - b.x,
            a.y - b.y,
            a.z - b.z,
            a.w - b.w

        };
#endif
    }

    NCPP_FORCE_INLINE F_quaternion_f32 NCPP_VECTOR_CALL multiply(nmath::PA_quaternion_f32 a, nmath::PA_quaternion_f32 b) noexcept
    {
        
        return complex_multiply<PA_quaternion_f32, PA_quaternion_f32, F_quaternion_f32>(a, b);
    }

}

NMATH_DEFINE_PLUS_OPERATOR(nmath::PA_quaternion_f32, nmath::F_quaternion_f32);
NMATH_DEFINE_MINUS_OPERATOR(nmath::PA_quaternion_f32, nmath::F_quaternion_f32);

NMATH_DEFINE_ADD_OPERATOR(nmath::PA_quaternion_f32, nmath::PA_quaternion_f32, nmath::F_quaternion_f32);
NMATH_DEFINE_SELF_ADD_OPERATOR(nmath::F_quaternion_f32, nmath::PA_quaternion_f32);

NMATH_DEFINE_SUBTRACT_OPERATOR(nmath::PA_quaternion_f32, nmath::PA_quaternion_f32, nmath::F_quaternion_f32);
NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(nmath::F_quaternion_f32, nmath::PA_quaternion_f32);

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_quaternion_f32, nmath::PA_quaternion_f32, nmath::F_quaternion_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_quaternion_f32, nmath::PA_quaternion_f32);