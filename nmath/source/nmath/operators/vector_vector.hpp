#pragma once

/** @file nmath/operators/vector_vector.hpp
*
*   Implement operators between vector and vector.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/vector.hpp>
#include <nmath/functions/data_functions.hpp>
#include <nmath/operators/helper.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_vector2_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {
    
    NCPP_FORCE_INLINE F_vector2_f32 minus(PA_vector2_f32 a) noexcept
    {
        return data2_minus(a);
    }
    NCPP_FORCE_INLINE F_vector2_f32 add(PA_vector2_f32 a, PA_vector2_f32 b) noexcept
    {
        return data2_add(a, b);
    }
    NCPP_FORCE_INLINE F_vector2_f32 subtract(PA_vector2_f32 a, PA_vector2_f32 b) noexcept
    {
        return data2_subtract(a, b);
    }

    NCPP_FORCE_INLINE F_vector2_f32 multiply(PA_vector2_f32 a, PA_vector2_f32 b) noexcept
    {
        return data2_multiply(a, b);
    }
    NCPP_FORCE_INLINE F_vector2_f32 divide(PA_vector2_f32 a, PA_vector2_f32 b) noexcept
    {
        return data2_divide(a, b);
    }

}

NMATH_DEFINE_PLUS_OPERATOR(nmath::PA_vector2_f32, nmath::F_vector2_f32);
NMATH_DEFINE_MINUS_OPERATOR(nmath::PA_vector2_f32, nmath::F_vector2_f32);

NMATH_DEFINE_ADD_OPERATOR(nmath::PA_vector2_f32, nmath::PA_vector2_f32, nmath::F_vector2_f32);
NMATH_DEFINE_SELF_ADD_OPERATOR(nmath::F_vector2_f32, nmath::PA_vector2_f32);

NMATH_DEFINE_SUBTRACT_OPERATOR(nmath::PA_vector2_f32, nmath::PA_vector2_f32, nmath::F_vector2_f32);
NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(nmath::F_vector2_f32, nmath::PA_vector2_f32);

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_vector2_f32, nmath::PA_vector2_f32, nmath::F_vector2_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_vector2_f32, nmath::PA_vector2_f32);

NMATH_DEFINE_DIVIDE_OPERATOR(nmath::PA_vector2_f32, nmath::PA_vector2_f32, nmath::F_vector2_f32);
NMATH_DEFINE_SELF_DIVIDE_OPERATOR(nmath::F_vector2_f32, nmath::PA_vector2_f32);



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_vector3_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {

    NCPP_FORCE_INLINE F_vector3_f32 NCPP_VECTOR_CALL minus(PA_vector3_f32 a) noexcept
    {

        return data3_minus(a);
    }
    NCPP_FORCE_INLINE F_vector3_f32 NCPP_VECTOR_CALL add(PA_vector3_f32 a, PA_vector3_f32 b) noexcept
    {

        return data3_add(a, b);
    }
    NCPP_FORCE_INLINE F_vector3_f32 NCPP_VECTOR_CALL subtract(PA_vector3_f32 a, PA_vector3_f32 b) noexcept
    {

        return data3_subtract(a, b);
    }

    NCPP_FORCE_INLINE F_vector3_f32 NCPP_VECTOR_CALL multiply(PA_vector3_f32 a, PA_vector3_f32 b) noexcept
    {

        return data3_multiply(a, b);
    }
    NCPP_FORCE_INLINE F_vector3_f32 NCPP_VECTOR_CALL divide(PA_vector3_f32 a, PA_vector3_f32 b) noexcept
    {

        return data3_divide(a, b);
    }

}

NMATH_DEFINE_PLUS_OPERATOR(nmath::PA_vector3_f32, nmath::F_vector3_f32);
NMATH_DEFINE_MINUS_OPERATOR(nmath::PA_vector3_f32, nmath::F_vector3_f32);

NMATH_DEFINE_ADD_OPERATOR(nmath::PA_vector3_f32, nmath::PA_vector3_f32, nmath::F_vector3_f32);
NMATH_DEFINE_SELF_ADD_OPERATOR(nmath::F_vector3_f32, nmath::PA_vector3_f32);

NMATH_DEFINE_SUBTRACT_OPERATOR(nmath::PA_vector3_f32, nmath::PA_vector3_f32, nmath::F_vector3_f32);
NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(nmath::F_vector3_f32, nmath::PA_vector3_f32);

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_vector3_f32, nmath::PA_vector3_f32, nmath::F_vector3_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_vector3_f32, nmath::PA_vector3_f32);

NMATH_DEFINE_DIVIDE_OPERATOR(nmath::PA_vector3_f32, nmath::PA_vector3_f32, nmath::F_vector3_f32);
NMATH_DEFINE_SELF_DIVIDE_OPERATOR(nmath::F_vector3_f32, nmath::PA_vector3_f32);



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_vector4_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {

    NCPP_FORCE_INLINE F_vector4_f32 NCPP_VECTOR_CALL minus(PA_vector4_f32 a) noexcept
    {

        return data4_minus(a);
    }
    NCPP_FORCE_INLINE F_vector4_f32 NCPP_VECTOR_CALL add(PA_vector4_f32 a, PA_vector4_f32 b) noexcept
    {

        return data4_add(a, b);
    }
    NCPP_FORCE_INLINE F_vector4_f32 NCPP_VECTOR_CALL subtract(PA_vector4_f32 a, PA_vector4_f32 b) noexcept
    {

        return data4_subtract(a, b);
    }

    NCPP_FORCE_INLINE F_vector4_f32 NCPP_VECTOR_CALL multiply(PA_vector4_f32 a, PA_vector4_f32 b) noexcept
    {

        return data4_multiply(a, b);
    }
    NCPP_FORCE_INLINE F_vector4_f32 NCPP_VECTOR_CALL divide(PA_vector4_f32 a, PA_vector4_f32 b) noexcept
    {

        return data4_divide(a, b);
    }

}

NMATH_DEFINE_PLUS_OPERATOR(nmath::PA_vector4_f32, nmath::F_vector4_f32);
NMATH_DEFINE_MINUS_OPERATOR(nmath::PA_vector4_f32, nmath::F_vector4_f32);

NMATH_DEFINE_ADD_OPERATOR(nmath::PA_vector4_f32, nmath::PA_vector4_f32, nmath::F_vector4_f32);
NMATH_DEFINE_SELF_ADD_OPERATOR(nmath::F_vector4_f32, nmath::PA_vector4_f32);

NMATH_DEFINE_SUBTRACT_OPERATOR(nmath::PA_vector4_f32, nmath::PA_vector4_f32, nmath::F_vector4_f32);
NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(nmath::F_vector4_f32, nmath::PA_vector4_f32);

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_vector4_f32, nmath::PA_vector4_f32, nmath::F_vector4_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_vector4_f32, nmath::PA_vector4_f32);

NMATH_DEFINE_DIVIDE_OPERATOR(nmath::PA_vector4_f32, nmath::PA_vector4_f32, nmath::F_vector4_f32);
NMATH_DEFINE_SELF_DIVIDE_OPERATOR(nmath::F_vector4_f32, nmath::PA_vector4_f32);