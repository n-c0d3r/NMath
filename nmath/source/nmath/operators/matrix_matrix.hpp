#pragma once

/** @file nmath/operators/matrix_matrix.hpp
*
*   Implement operators between matrix and matrix.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/data_forward.hpp>
#include <nmath/types/matrix.hpp>
#include <nmath/functions/data_functions.hpp>
#include <nmath/functions/matrix_invert.hpp>
#include <nmath/operators/helper.hpp>
#include <nmath/operators/matrix_vector.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_matrix2x2_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {
    
    NCPP_FORCE_INLINE F_matrix2x2_f32 minus(PA_matrix2x2_f32 a) noexcept
    {
        return vecma_forward(
            data2x2_minus(data_forward(a))
        );
    }
    NCPP_FORCE_INLINE F_matrix2x2_f32 add(PA_matrix2x2_f32 a, PA_matrix2x2_f32 b) noexcept
    {
        return vecma_forward(
            data2x2_add(data_forward(a), data_forward(b))
        );
    }
    NCPP_FORCE_INLINE F_matrix2x2_f32 subtract(PA_matrix2x2_f32 a, PA_matrix2x2_f32 b) noexcept
    {
        return vecma_forward(
            data2x2_subtract(data_forward(a), data_forward(b))
        );
    }
    NCPP_FORCE_INLINE F_matrix2x2_f32 multiply(PA_matrix2x2_f32 a, PA_matrix2x2_f32 b) noexcept
    {
        return {
            
            a * b.a,
            a * b.b
            
        };
    }
    NCPP_FORCE_INLINE F_matrix2x2_f32 NMATH_CALL_CNV divide(PA_matrix2x2_f32 a, PA_matrix2x2_f32 b) noexcept
    {
        return multiply(
            a,
            invert(b)
        );
    }

}

NMATH_DEFINE_PLUS_OPERATOR(nmath::PA_matrix2x2_f32, nmath::F_matrix2x2_f32);
NMATH_DEFINE_MINUS_OPERATOR(nmath::PA_matrix2x2_f32, nmath::F_matrix2x2_f32);

NMATH_DEFINE_ADD_OPERATOR(nmath::PA_matrix2x2_f32, nmath::PA_matrix2x2_f32, nmath::F_matrix2x2_f32);
NMATH_DEFINE_SELF_ADD_OPERATOR(nmath::F_matrix2x2_f32, nmath::PA_matrix2x2_f32);

NMATH_DEFINE_SUBTRACT_OPERATOR(nmath::PA_matrix2x2_f32, nmath::PA_matrix2x2_f32, nmath::F_matrix2x2_f32);
NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(nmath::F_matrix2x2_f32, nmath::PA_matrix2x2_f32);

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_matrix2x2_f32, nmath::PA_matrix2x2_f32, nmath::F_matrix2x2_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_matrix2x2_f32, nmath::PA_matrix2x2_f32);

NMATH_DEFINE_DIVIDE_OPERATOR(nmath::PA_matrix2x2_f32, nmath::PA_matrix2x2_f32, nmath::F_matrix2x2_f32);
NMATH_DEFINE_SELF_DIVIDE_OPERATOR(nmath::F_matrix2x2_f32, nmath::PA_matrix2x2_f32);



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_matrix3x3_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {

    NCPP_FORCE_INLINE F_matrix3x3_f32 NMATH_CALL_CNV minus(PA_matrix3x3_f32 a) noexcept
    {

        return vecma_forward(
            data3x3_minus(data_forward(a))
        );
    }
    NCPP_FORCE_INLINE F_matrix3x3_f32 NMATH_CALL_CNV add(PA_matrix3x3_f32 a, PA_matrix3x3_f32 b) noexcept
    {

        return vecma_forward(
            data3x3_add(data_forward(a), data_forward(b))
        );
    }
    NCPP_FORCE_INLINE F_matrix3x3_f32 NMATH_CALL_CNV subtract(PA_matrix3x3_f32 a, PA_matrix3x3_f32 b) noexcept
    {

        return vecma_forward(
            data3x3_subtract(data_forward(a), data_forward(b))
        );
    }
    NCPP_FORCE_INLINE F_matrix3x3_f32 NMATH_CALL_CNV multiply(PA_matrix3x3_f32 a, PA_matrix3x3_f32 b) noexcept
    {
        return {
            
            a * b.a,
            a * b.b,
            a * b.c
            
        };
    }
    NCPP_FORCE_INLINE F_matrix3x3_f32 NMATH_CALL_CNV divide(PA_matrix3x3_f32 a, PA_matrix3x3_f32 b) noexcept
    {
        return multiply(
            a,
            invert(b)
        );
    }

}

NMATH_DEFINE_PLUS_OPERATOR(nmath::PA_matrix3x3_f32, nmath::F_matrix3x3_f32);
NMATH_DEFINE_MINUS_OPERATOR(nmath::PA_matrix3x3_f32, nmath::F_matrix3x3_f32);

NMATH_DEFINE_ADD_OPERATOR(nmath::PA_matrix3x3_f32, nmath::PA_matrix3x3_f32, nmath::F_matrix3x3_f32);
NMATH_DEFINE_SELF_ADD_OPERATOR(nmath::F_matrix3x3_f32, nmath::PA_matrix3x3_f32);

NMATH_DEFINE_SUBTRACT_OPERATOR(nmath::PA_matrix3x3_f32, nmath::PA_matrix3x3_f32, nmath::F_matrix3x3_f32);
NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(nmath::F_matrix3x3_f32, nmath::PA_matrix3x3_f32);

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_matrix3x3_f32, nmath::PA_matrix3x3_f32, nmath::F_matrix3x3_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_matrix3x3_f32, nmath::PA_matrix3x3_f32);

NMATH_DEFINE_DIVIDE_OPERATOR(nmath::PA_matrix3x3_f32, nmath::PA_matrix3x3_f32, nmath::F_matrix3x3_f32);
NMATH_DEFINE_SELF_DIVIDE_OPERATOR(nmath::F_matrix3x3_f32, nmath::PA_matrix3x3_f32);



////////////////////////////////////////////////////////////////////////////////////
//  nmath::F_matrix4x4_f32
////////////////////////////////////////////////////////////////////////////////////
namespace nmath {

    NCPP_FORCE_INLINE F_matrix4x4_f32 NMATH_CALL_CNV minus(PA_matrix4x4_f32 a) noexcept
    {

        return vecma_forward(
            data4x4_minus(data_forward(a))
        );
    }
    NCPP_FORCE_INLINE F_matrix4x4_f32 NMATH_CALL_CNV add(PA_matrix4x4_f32 a, PA_matrix4x4_f32 b) noexcept
    {

        return vecma_forward(
            data4x4_add(data_forward(a), data_forward(b))
        );
    }
    NCPP_FORCE_INLINE F_matrix4x4_f32 NMATH_CALL_CNV subtract(PA_matrix4x4_f32 a, PA_matrix4x4_f32 b) noexcept
    {

        return vecma_forward(
            data4x4_subtract(data_forward(a), data_forward(b))
        );
    }
    NCPP_FORCE_INLINE F_matrix4x4_f32 NMATH_CALL_CNV multiply(PA_matrix4x4_f32 a, PA_matrix4x4_f32 b) noexcept
    {
        return {
            
            a * b.a,
            a * b.b,
            a * b.c,
            a * b.d
            
        };
    }

}

NMATH_DEFINE_PLUS_OPERATOR(nmath::PA_matrix4x4_f32, nmath::F_matrix4x4_f32);
NMATH_DEFINE_MINUS_OPERATOR(nmath::PA_matrix4x4_f32, nmath::F_matrix4x4_f32);

NMATH_DEFINE_ADD_OPERATOR(nmath::PA_matrix4x4_f32, nmath::PA_matrix4x4_f32, nmath::F_matrix4x4_f32);
NMATH_DEFINE_SELF_ADD_OPERATOR(nmath::F_matrix4x4_f32, nmath::PA_matrix4x4_f32);

NMATH_DEFINE_SUBTRACT_OPERATOR(nmath::PA_matrix4x4_f32, nmath::PA_matrix4x4_f32, nmath::F_matrix4x4_f32);
NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(nmath::F_matrix4x4_f32, nmath::PA_matrix4x4_f32);

NMATH_DEFINE_MULTIPLY_OPERATOR(nmath::PA_matrix4x4_f32, nmath::PA_matrix4x4_f32, nmath::F_matrix4x4_f32);
NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(nmath::F_matrix4x4_f32, nmath::PA_matrix4x4_f32);
