#pragma once

/** @file nmath/operators/rvector_rvector.hpp
*
*   Implement operators between rvector and rvector.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/rvector.hpp>

#pragma endregion



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



namespace nmath {

    NMATH_USING_NLIB_NAMESPACES();


    
    ////////////////////////////////////////////////////////////////////////////////////
    //  F_rvector2_f32
    ////////////////////////////////////////////////////////////////////////////////////
    inline F_rvector2_f32 operator + (const F_rvector2_f32& a, const F_rvector2_f32& b) noexcept {
        
        return {
            
            a.x + b.x,
            a.y + b.y
            
        };
    }
    inline F_rvector2_f32 operator - (const F_rvector2_f32& a, const F_rvector2_f32& b) noexcept {
        
        return {
            
            a.x - b.x,
            a.y - b.y
            
        };
    }
    inline F_rvector2_f32 operator * (const F_rvector2_f32& a, const F_rvector2_f32& b) noexcept {
        
        return {
            
            a.x * b.x,
            a.y * b.y
            
        };
    }
    inline F_rvector2_f32 operator / (const F_rvector2_f32& a, const F_rvector2_f32& b) noexcept {
        
        return {
            
            a.x / b.x,
            a.y / b.y
            
        };
    }



    ////////////////////////////////////////////////////////////////////////////////////
    //  F_rvector3_f32
    ////////////////////////////////////////////////////////////////////////////////////
    inline F_rvector3_f32 operator + (const F_rvector3_f32& a, const F_rvector3_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_add_ps(a.xyz_, b.xyz_);
#else
        return {
            
            a.x + b.x,
            a.y + b.y,
            a.z + b.z
            
        };
#endif
    }
    inline F_rvector3_f32 operator - (const F_rvector3_f32& a, const F_rvector3_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_sub_ps(a.xyz_, b.xyz_);
#else
        return {
            
            a.x - b.x,
            a.y - b.y,
            a.z - b.z
            
        };
#endif
    }
    inline F_rvector3_f32 operator * (const F_rvector3_f32& a, const F_rvector3_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_mul_ps(a.xyz_, b.xyz_);
#else
        return {
            
            a.x * b.x,
            a.y * b.y,
            a.z * b.z
            
        };
#endif
    }
    inline F_rvector3_f32 operator / (const F_rvector3_f32& a, const F_rvector3_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_div_ps(a.xyz_, b.xyz_);
#else
        return {
            
            a.x / b.x,
            a.y / b.y,
            a.z / b.z
            
        };
#endif
    }



    ////////////////////////////////////////////////////////////////////////////////////
    //  F_rvector4_f32
    ////////////////////////////////////////////////////////////////////////////////////
    inline F_rvector4_f32 operator + (const F_rvector4_f32& a, const F_rvector4_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_add_ps(a.xyzw_, b.xyzw_);
#else
        return {
            
            a.x + b.x,
            a.y + b.y,
            a.z + b.z,
            a.w + b.w
            
        };
#endif
    }
    inline F_rvector4_f32 operator - (const F_rvector4_f32& a, const F_rvector4_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_sub_ps(a.xyzw_, b.xyzw_);
#else
        return {
            
            a.x - b.x,
            a.y - b.y,
            a.z - b.z,
            a.w - b.w
            
        };
#endif
    }
    inline F_rvector4_f32 operator * (const F_rvector4_f32& a, const F_rvector4_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_mul_ps(a.xyzw_, b.xyzw_);
#else
        return {
            
            a.x * b.x,
            a.y * b.y,
            a.z * b.z,
            a.w * b.w
            
        };
#endif
    }
    inline F_rvector4_f32 operator / (const F_rvector4_f32& a, const F_rvector4_f32& b) noexcept {
        
#ifdef NCPP_ENABLE_SSE
        return _mm_div_ps(a.xyzw_, b.xyzw_);
#else
        return {
            
            a.x / b.x,
            a.y / b.y,
            a.z / b.z,
            a.w / b.w
            
        };
#endif
    }

}
