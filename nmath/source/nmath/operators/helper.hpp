#pragma once

/** @file nmath/operators/helper.hpp
*
*   Implement helper.
*/



 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

#pragma endregion



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#define NMATH_DEFINE_IS_GREATER_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE bool NMATH_CALL_CNV operator > (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::is_greater(a, b);\
    }
#define NMATH_DEFINE_IS_LESS_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE bool NMATH_CALL_CNV operator < (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::is_less(a, b);\
    }
#define NMATH_DEFINE_IS_GREATER_EQUAL_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE bool NMATH_CALL_CNV operator >= (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::is_greater_equal(a, b);\
    }
#define NMATH_DEFINE_IS_LESS_EQUAL_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE bool NMATH_CALL_CNV operator <= (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::is_less_equal(a, b);\
    }
    
#define NMATH_DEFINE_ADD_OPERATOR(Type1, Type2, ReturnType) \
    NCPP_FORCE_INLINE ReturnType NMATH_CALL_CNV operator + (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::add(a, b);\
    }
#define NMATH_DEFINE_SELF_ADD_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE Type1& NMATH_CALL_CNV operator += (Type1& a, Type2 b) noexcept \
    {\
        \
        a = nmath::add(a, b);\
        \
        return a;\
    }   

#define NMATH_DEFINE_SUBTRACT_OPERATOR(Type1, Type2, ReturnType) \
    NCPP_FORCE_INLINE ReturnType NMATH_CALL_CNV operator - (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::subtract(a, b);\
    }
#define NMATH_DEFINE_SELF_SUBTRACT_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE Type1& NMATH_CALL_CNV operator -= (Type1& a, Type2 b) noexcept \
    {\
        \
        a = nmath::subtract(a, b);\
        \
        return a;\
    }

#define NMATH_DEFINE_MULTIPLY_OPERATOR(Type1, Type2, ReturnType) \
    NCPP_FORCE_INLINE ReturnType NMATH_CALL_CNV operator * (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::multiply(a, b);\
    }
#define NMATH_DEFINE_SELF_MULTIPLY_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE Type1& NMATH_CALL_CNV operator *= (Type1& a, Type2 b) noexcept \
    {\
        \
        a = nmath::multiply(a, b);\
        \
        return a;\
    }   

#define NMATH_DEFINE_DIVIDE_OPERATOR(Type1, Type2, ReturnType) \
    NCPP_FORCE_INLINE ReturnType NMATH_CALL_CNV operator / (Type1 a, Type2 b) noexcept \
    {\
        \
        return nmath::divide(a, b);\
    }
#define NMATH_DEFINE_SELF_DIVIDE_OPERATOR(Type1, Type2) \
    NCPP_FORCE_INLINE Type1& NMATH_CALL_CNV operator /= (Type1& a, Type2 b) noexcept \
    {\
        \
        a = nmath::divide(a, b);\
        \
        return a;\
    }

#define NMATH_DEFINE_PLUS_OPERATOR(Type1, ReturnType) \
    NCPP_FORCE_INLINE ReturnType NMATH_CALL_CNV operator + (Type1 a) noexcept \
    {\
        \
        return a;\
    }
#define NMATH_DEFINE_MINUS_OPERATOR(Type1, ReturnType) \
    NCPP_FORCE_INLINE ReturnType NMATH_CALL_CNV operator - (Type1 a) noexcept \
    {\
        \
        return nmath::minus(a);\
    }