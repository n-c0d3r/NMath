#pragma once

/** @file nmath/applications/projection_matrix.hpp
*
*   Implement projection matrix.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nmath/types/matrix.hpp>

#pragma endregion



namespace nmath {

    enum class E_projection_type {

        PERSPECTIVE,
        ORTHOGRAPHIC

    };

    template<E_projection_type projection_type__ = E_projection_type::PERSPECTIVE, typename F_element__ = NMATH_DEFAULT_FP_TYPE>
    TF_matrix4x4<F_element__> T_projection_matrix(auto, auto, auto) noexcept;



    ////////////////////////////////////////////////////////////////////////////////////
    //  f32
    ////////////////////////////////////////////////////////////////////////////////////
    template<>
    inline F_matrix4x4_f32 T_projection_matrix<E_projection_type::PERSPECTIVE, f32>(
        F_vector2_f32 vertical_fov_and_aspect_ratio,
        f32 near_plane,
        f32 far_plane
    ) noexcept {

		f32 half_vertical_fov = vertical_fov_and_aspect_ratio.x * 0.5f;
		f32 sin_half_vertical_fov = sinf(half_vertical_fov);
		f32 cos_half_vertical_fov = cosf(half_vertical_fov);

		float ys = cos_half_vertical_fov / sin_half_vertical_fov;
		float xs = ys / vertical_fov_and_aspect_ratio.y;
		float zs = far_plane / (far_plane - near_plane);

		return {
			F_vector4_f32{xs, 0, 0, 0},
			F_vector4_f32{0, ys, 0, 0},
			F_vector4_f32{0, 0, zs, 1},
			F_vector4_f32{0, 0, -zs * near_plane, 0}
		};
    }
    template<>
    inline F_matrix4x4_f32 T_projection_matrix<E_projection_type::ORTHOGRAPHIC, f32>(
        F_vector2_f32 view_size,
        f32 near_plane,
        f32 far_plane
    ) noexcept {

        float range = 1.0f / (far_plane - near_plane);

        return {
            F_vector4_f32{2.0f / view_size.width, 0, 0, 0},
            F_vector4_f32{0, 2.0f / view_size.height, 0, 0},
            F_vector4_f32{0, 0, range, 1.0f},
            F_vector4_f32{0, 0, -range * near_plane, 1.0f}
        };
    }

}